package euler;

import java.math.BigDecimal;
import java.util.List;

import euler.utils.Sequence;
import euler.utils.SequenceFinderHelper;

public class Problem26 {

	public static void main(String[] args) {
//		List<Sequence> sq = SequenceFinderHelper.findSequences("0011668611435239206534422403733955659276546091015169194865810968494749124854142357059509918319719953325554259043173862310385064177362893815635939323220536756126021003500583430571761960326721120186697782963827304550758459743290548424737456242707117852975495915985997666277712952158693115519253208868144690781796966161026837806301050175029171528588098016336056009334889148191365227537922987164527421236872812135355892648774795799299883313885647607934655775962660443407234539089848308051341890315052508751458576429404900816802800466744457409568261376896149358226371061843640606767794632438739789964994165694282380396732788798133022170361726954492415402567094515752625437572928821470245040840140023337222870478413068844807467911318553092182030338389731621936989498249708284714119019836639439906651108518086347724620770128354725787631271878646441073512252042007001166861143523920653442240373395565927654609101516919486581096849474912485414235705950991831971995332555425904317386231038506417736289381563594");
//		System.out.println(sq);
		
		Integer maxD = 1;
		Integer maxSize = 1;
		for (int d = 857; d < 858; d++) {
			BigDecimal a = BigDecimal.ONE.divide(new BigDecimal(d), 2000, BigDecimal.ROUND_CEILING);
			System.out.print("1 / " + d + " = " + a );
			List<Sequence> sqns = SequenceFinderHelper.findSequences(a.toPlainString());
			System.out.println(sqns);
			Integer size = 0;
			for (Sequence sq : sqns) {
				size = Math.max(size, sq.getSize());	
			}
			System.out.println("\t" + size);
			if (size > maxSize) {
				maxSize = size;
				maxD = d;
			}
		}
		System.out.println("maxD : " + maxD + ", maxSize : " + maxSize);
	}

}
