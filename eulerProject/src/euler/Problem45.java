package euler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;

import euler.utils.AlphabetHelper;
import euler.utils.DigitUtil;
import euler.utils.PowHelper;
import euler.utils.Prime;

/**
* Triangular, pentagonal, and hexagonal
* Problem 45
* Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
* Triangle	 	Tn=n(n+1)/2			1, 3,  6, 10, 15, ...
* Pentagonal 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
* Hexagonal	 	Hn=n(2n−1)			1, 6, 15, 28, 45, ...
* It can be verified that T285 = P165 = H143 = 40755.
* Find the next triangle number that is also pentagonal and hexagonal.
**/
public class Problem45 {

	public static void main(String[] args) {
		for(int i = 144; i < 1_000_000; i++) {
			long hexaNum = hexaNum(i);
			long pentaNum = 1;
			long pentaIdx = 1;
			while(pentaNum < hexaNum) {
				pentaNum = pentaNum(++pentaIdx);
			}
			if (pentaNum == hexaNum) {
				// check for trainum
				long triaNum = 1;
				long triaIdx = 1;
				while(triaNum < hexaNum) {
					triaNum = triaNum(++triaIdx);
				}
				if (triaNum == hexaNum) {
					System.out.println("i = " + i + " j = " + pentaIdx + " k = " + triaIdx + " num = " + pentaNum);
					System.exit(0);
				}
			}
		}
	}
		
	private static Long triaNum(long i) {
		return i * (i + 1) / 2;
	}
	
	private static Long pentaNum(long i) {
		return (i * (3 * i - 1)) / 2;
	}

	private static Long hexaNum(long i) {
		return i * (2*i - 1);
	}

}
