package euler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;

import euler.utils.AlphabetHelper;
import euler.utils.DigitUtil;
import euler.utils.PowHelper;
import euler.utils.Prime;

/**
* Pentagon numbers
* 
* Problem 44
* 
* Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
* The first ten pentagonal numbers are:
* 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
* It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, 
* their difference, 70 − 22 = 48, is not pentagonal.
* 
* Find the pair of pentagonal numbers, Pj and Pk, for which their sum 
* and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*
**/
public class Problem44 {

	private static ArrayList<Long> pentagonalNumbers = new ArrayList<Long>();
	
	public static void main(String[] args) {
//		long sum = 0;
		long pos = 0;
		for (int i = 1; i < 10000; i++) {
			Long sum = pentaNum(i);
			pentagonalNumbers.add(sum);
			for (int j = 1; j < pentagonalNumbers.size() - 1; j++) {
				Long p1 = pentagonalNumbers.get(j);
				for (int k = 1; k < j; k++) {
				Long p2 = pentagonalNumbers.get(k);
					if ((p1+p2) == sum && pentagonalNumbers.contains(Long.valueOf(p1-p2))) {
						System.out.println("p1 = " + p1 + " p2 = " + p2 + " D = " + (p1 - p2));
						System.exit(0);
					}
				}				
			}
		}
	}
	
	private static Long pentaNum(int i) {
		return (long) ((i * (3 * i - 1)) / 2);
	}
	
}
